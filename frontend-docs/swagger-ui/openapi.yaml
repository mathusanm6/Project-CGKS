openapi: 3.1.0
info:
  title: Itemset Mining API
  version: 1.1.0
  description: |
    REST API for submitting, monitoring, cancelling, and acknowledging itemset mining tasks.
    This API is used by the frontend to interact with the mining backend. All endpoints return structured JSON responses.

    **Note:** All endpoints are under `/api/tasks`.

servers:
  - url: http://localhost:8080
    description: Local development server

paths:
  /api/tasks:
    post:
      summary: Submit a new mining task
      description: |
        Submits a new mining task. If a task is already running or pending, returns 409 Conflict.
        The backend responds immediately with the created task object (status is usually `PENDING`).

        **Example request:**
        ```json
        {
          "engine": "spmf",
          "dataset": "/data/contextPasquier99.dat",
          "queryType": "frequent",
          "params": {
            "minSupport": 0.5
          }
        }
        ```
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MiningTaskRequest"
            examples:
              basic:
                summary: Frequent itemset mining task
                value:
                  engine: spmf
                  dataset: /data/contextPasquier99.dat
                  queryType: frequent
                  params:
                    minSupport: 0.5
      responses:
        "200":
          description: Task accepted and created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"
              examples:
                created:
                  summary: Task created
                  value:
                    id: "123e4567-e89b-12d3-a456-426614174000"
                    engine: spmf
                    dataset: /data/contextPasquier99.dat
                    queryType: frequent
                    params:
                      minSupport: 0.5
                    status: PENDING
                    result: null
        "409":
          description: A task is already processing
          content:
            application/json:
              schema:
                type: string
              examples:
                conflict:
                  value: "A task is already processing. Please wait or cancel the current task."
        "503":
          description: Service unavailable or cannot accept new tasks
          content:
            application/json:
              schema:
                type: string
              examples:
                unavailable:
                  value: "Failed to submit task. The service might be busy or unable to accept new tasks at the moment."

  /api/tasks/status:
    get:
      summary: Get the status of the current mining task
      description: |
        Returns the current task (if any). If no task is running or pending, returns 204 No Content.
      responses:
        "200":
          description: Current task status
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"
              examples:
                running:
                  value:
                    id: "123e4567-e89b-12d3-a456-426614174000"
                    engine: spmf
                    dataset: /data/contextPasquier99.dat
                    queryType: frequent
                    params:
                      minSupport: 0.5
                    status: PROCESSING
                    result: null
        "204":
          description: No active task

  /api/tasks/cancel:
    post:
      summary: Cancel the current mining task
      description: |
        Requests cancellation of the current task. If no task is running, returns 404.
      responses:
        "200":
          description: Cancellation acknowledged
          content:
            text/plain:
              schema:
                type: string
              example: "Cancellation request acknowledged. The task will be stopped."
        "404":
          description: No active task to cancel
          content:
            text/plain:
              schema:
                type: string
              example: "No active task to cancel or task is already completed/cancelled."

  /api/tasks/acknowledge:
    post:
      summary: Acknowledge and clear a finished task
      description: |
        Acknowledge a terminal (COMPLETED/FAILED/CANCELLED) task and clear it from the backend. Returns 404 if no such task exists.
      responses:
        "200":
          description: Task acknowledged and cleared
          content:
            text/plain:
              schema:
                type: string
              example: "Task acknowledged and cleared."
        "404":
          description: No terminal task to acknowledge
          content:
            text/plain:
              schema:
                type: string
              example: "No terminal task to acknowledge."

components:
  schemas:
    MiningTaskRequest:
      type: object
      required:
        - engine
        - dataset
        - queryType
        - params
      properties:
        engine:
          type: string
          description: Mining engine to use
          enum: [spmf, choco, auto]
        dataset:
          type: string
          description: Path to the dataset (depending on backend configuration)
        queryType:
          type: string
          description: Type of mining query
          enum:
            [
              frequent,
              closed,
              maximal,
              rare,
              generators,
              minimal,
              size_between,
              presence,
              absence,
            ]
        params:
          type: object
          description: Additional parameters for the mining query
          discriminator:
            propertyName: queryType
            mapping:
              frequent: "#/components/schemas/FrequentParams"
              closed: "#/components/schemas/ClosedParams"
              maximal: "#/components/schemas/MaximalParams"
              rare: "#/components/schemas/RareParams"
              generators: "#/components/schemas/GeneratorsParams"
              minimal: "#/components/schemas/MinimalParams"
              size_between: "#/components/schemas/SizeBetweenParams"
              presence: "#/components/schemas/PresenceParams"
              absence: "#/components/schemas/AbsenceParams"

    FrequentParams:
      type: object
      required:
        - minSupport
      properties:
        minSupport:
          type: number
          format: float
          minimum: 0
          maximum: 1
          description: Minimum support threshold (0-1)
          example: 0.5

    ClosedParams:
      type: object
      required:
        - minSupport
      properties:
        minSupport:
          type: number
          format: float
          minimum: 0
          maximum: 1
          description: Minimum support threshold (0-1)
          example: 0.5

    MaximalParams:
      type: object
      required:
        - minSupport
      properties:
        minSupport:
          type: number
          format: float
          minimum: 0
          maximum: 1
          description: Minimum support threshold (0-1)
          example: 0.5

    RareParams:
      type: object
      required:
        - maxSupport
      properties:
        maxSupport:
          type: number
          format: float
          minimum: 0
          maximum: 1
          description: Maximum support threshold (0-1)
          example: 0.1

    GeneratorsParams:
      type: object
      required:
        - minSupport
      properties:
        minSupport:
          type: number
          format: float
          minimum: 0
          maximum: 1
          description: Minimum support threshold (0-1)
          example: 0.5

    MinimalParams:
      type: object
      required:
        - maxSupport
      properties:
        maxSupport:
          type: number
          format: float
          minimum: 0
          maximum: 1
          description: Maximum support threshold (0-1)
          example: 0.5

    SizeBetweenParams:
      type: object
      required:
        - minSupport
        - minSize
        - maxSize
      properties:
        minSupport:
          type: number
          format: float
          minimum: 0
          maximum: 1
          description: Minimum support threshold (0-1)
          example: 0.5
        minSize:
          type: integer
          minimum: 1
          description: Minimum itemset size
          example: 2
        maxSize:
          type: integer
          minimum: 1
          description: Maximum itemset size
          example: 5

    PresenceParams:
      type: object
      required:
        - minSupport
        - items
      properties:
        minSupport:
          type: number
          format: float
          minimum: 0
          maximum: 1
          description: Minimum support threshold (0-1)
          example: 0.5
        items:
          type: array
          items:
            type: integer
          description: Item IDs to check for presence/absence
          example: [1, 3, 5]

    AbsenceParams:
      type: object
      required:
        - minSupport
        - items
      properties:
        minSupport:
          type: number
          format: float
          minimum: 0
          maximum: 1
          description: Minimum support threshold (0-1)
          example: 0.5
        items:
          type: array
          items:
            type: integer
          description: Item IDs to check for presence/absence
          example: [1, 3, 5]

    Task:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique task identifier
        status:
          type: string
          enum: [PENDING, PROCESSING, COMPLETED, FAILED, CANCELLED]
        parameters:
          type: object
          description: Task parameters (engine, dataset, queryType, params)
          properties:
            engine:
              type: string
            dataset:
              type: string
            queryType:
              type: string
            params:
              type: object
        result:
          type: array
          description: Array of discovered patterns (present if status is COMPLETED)
          items:
            type: object
            properties:
              pattern:
                type: array
                items:
                  type: integer
                description: Itemset pattern (as item IDs)
              freq:
                type: integer
                description: Pattern frequency (support count)
        error:
          type: string
          nullable: true
          description: Error message if the task failed
        cancellationRequested:
          type: boolean
          description: Whether cancellation was requested for this task
      required:
        - id
        - status
        - parameters
        - result
        - error
        - cancellationRequested
      example:
        id: "24b32fd0-7cae-4e18-bd9c-ab524f2e2f64"
        status: COMPLETED
        parameters:
          engine: SPMF
          dataset: /data/contextPasquier99.dat
          queryType: frequent
          params:
            minSupport: "0.5"
        result:
          - pattern: [1]
            freq: 3
          - pattern: [2]
            freq: 4
          - pattern: [3]
            freq: 4
          - pattern: [5]
            freq: 4
          - pattern: [1, 3]
            freq: 3
          - pattern: [2, 3]
            freq: 3
          - pattern: [2, 5]
            freq: 4
          - pattern: [3, 5]
            freq: 3
          - pattern: [2, 3, 5]
            freq: 3
        error: null
        cancellationRequested: false
